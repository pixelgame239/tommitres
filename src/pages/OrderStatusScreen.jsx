import React, { useEffect, useState } from "react";
import { collection, getDocs, deleteDoc, doc, onSnapshot } from "firebase/firestore";
import Header from "../components/Header";
import UserProfile from "../backend/userProfile";
import { db } from "../backend/firebase";
import "./orderStatusScreen.css";
import { confirmOrder } from "../backend/orderObject";

const OrderStatusScreen = () => {
  const [orders, setOrders] = useState([]);
  const [filterStatus, setFilterStatus] = useState("T·∫•t c·∫£");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { userType } = UserProfile();

  // ‚úÖ L·∫•y danh s√°ch ƒë∆°n h√†ng t·ª´ Firestore
  useEffect(() => {
    const fetchOrders = () => {
      try {
        console.log("üìå ƒêang l·∫•y danh s√°ch ƒë∆°n h√†ng t·ª´ Firestore...");
        const ordersCollection = collection(db, "Order");

        const unsubscribe = onSnapshot(ordersCollection, (orderSnapshot) => {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          let orderList = orderSnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
            buyDate: doc.data().buyDate?.toDate() || null,
          }));

          console.log("‚úÖ Danh s√°ch ƒë∆°n h√†ng l·∫•y ƒë∆∞·ª£c:", orderList);

          // L·ªçc ƒë∆°n h√†ng theo ng√†y h√¥m nay
          orderList = orderList
            .filter((order) => {
              if (!order.buyDate) return false;
              return (
                order.buyDate.getFullYear() === today.getFullYear() &&
                order.buyDate.getMonth() === today.getMonth() &&
                order.buyDate.getDate() === today.getDate()
              );
            })
            .sort((a, b) => b.buyDate - a.buyDate);

          console.log("üìå Danh s√°ch ƒë∆°n h√†ng sau khi l·ªçc theo ng√†y h√¥m nay:", orderList);

          setOrders(orderList);
        });

        return () => unsubscribe();
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  // ‚úÖ X√≥a ƒë∆°n h√†ng
  const handleDeleteOrder = async (orderId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?")) return;

    console.log(`üóëÔ∏è ƒêang x√≥a ƒë∆°n h√†ng c√≥ ID: ${orderId}`);
    try {
      await deleteDoc(doc(db, "Order", orderId));

      setOrders((prevOrders) => {
        const updatedOrders = prevOrders.filter((order) => order.id !== orderId);
        console.log("‚úÖ Danh s√°ch ƒë∆°n h√†ng sau khi x√≥a:", updatedOrders);
        return updatedOrders;
      });

      alert("ƒê√£ h·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
      alert("X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i!");
    }
  };

  if (loading) return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  if (error) return <div>L·ªói: {error}</div>;

  // ‚úÖ L·ªçc ƒë∆°n h√†ng theo tr·∫°ng th√°i
  const filteredOrders =
    filterStatus === "T·∫•t c·∫£"
      ? orders
      : orders.filter((order) => order.status === filterStatus);

  console.log(
    `üìå Danh s√°ch ƒë∆°n h√†ng sau khi l·ªçc theo tr·∫°ng th√°i "${filterStatus}":`,
    filteredOrders
  );

  return (
    <div>
      <Header />
      <h1 style={{marginTop:80}}>Qu·∫£n l√Ω tr·∫°ng th√°i ƒë∆°n h√†ng - H√¥m nay</h1>

      {/* B·ªô l·ªçc tr·∫°ng th√°i ƒë∆°n h√†ng */}
      <div style={{top}}>
        {["T·∫•t c·∫£", "ƒêang x·ª≠ l√Ω", "S·∫µn s√†ng giao"].map((status) => (
          <button key={status} onClick={() => setFilterStatus(status)}>
            {status}
          </button>
        ))}
      </div>
      <br />

      {/* B·∫£ng ƒë∆°n h√†ng */}
      <table className="order-table">
        <thead>
          <tr>
            <th>B√†n</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
            <th>S·∫£n ph·∫©m</th>
            <th>T·ªïng ti·ªÅn</th>
            <th>Ng√†y mua</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {filteredOrders.length === 0 ? (
            <tr>
              <td colSpan="7" style={{ textAlign: "center" }}>
                Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o h√¥m nay!
              </td>
            </tr>
          ) : (
            filteredOrders.map((order) => (
              <tr key={order.id}>
                <td data-label="B√†n:">{order.tableNumber}</td>
                <td data-label="Tr·∫°ng th√°i:">{order.status}</td>
                <td data-label="Ph∆∞∆°ng th·ª©c thanh to√°n:">{order.paymentMethod}</td>
                <td data-label="S·∫£n ph·∫©m:">
                  {order.products?.map((item, index) => (
                    <div key={index}>
                      {item.productName} x {item.orderQuantity}
                    </div>
                  ))}
                </td>
                <td data-label="T·ªïng ti·ªÅn:">{order.totalPrice?.toLocaleString("vi-VN")} VNƒê</td>
                <td data-label="Ng√†y mua:">
                  {order.buyDate
                    ? order.buyDate.toLocaleString("vi-VN")
                    : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
                </td>
                <td data-label="Thao t√°c:">
                  {order.status !== "Ho√†n th√†nh" && (
                    <div className="action-buttons">
                      {order.status !== "ƒê√£ x√°c nh·∫≠n"?
                      <button
                        className="confirm-btn"
                        onClick={() => confirmOrder(order.orderID, userType)}
                      >
                        X√°c nh·∫≠n
                      </button>
                      :null}
                      <button
                        className="edit-btn"
                        onClick={() => alert(`Ch·ªânh s·ª≠a ƒë∆°n h√†ng: ${order.id}`)}
                      >
                        Ch·ªânh s·ª≠a
                      </button>
                      <button
                        className="delete-btn"
                        onClick={() => handleDeleteOrder(order.id)}
                      >
                        H·ªßy ƒë∆°n
                      </button>
                    </div>
                  )}
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
};

export default OrderStatusScreen;